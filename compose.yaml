# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  caddy:
    image: caddy:2.7.6
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./site:/srv
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend
  server:
    container_name: server
    restart: unless-stopped
    env_file:
      - .build.env
    environment:
      NODE_ENV: "production"
    build:
      context: .
    ports:
      - 3000:3000
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend
  db:
    container_name: db
    image: mysql
    environment:
        MYSQL_DATABASE: "botris"
        MYSQL_ROOT_PASSWORD: "password"
        # MYSQL_USER: "root"
        # MYSQL_PASSWORD: "password"
        # MYSQL_DATABASE: "database"
    restart: unless-stopped
    volumes:
      - db:/var/lib/botris-db
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 20s
        retries: 10
    networks:
      - frontend
volumes:
  db:
  caddy_data:
  caddy_config:
networks:
  frontend: